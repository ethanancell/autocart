// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// autocart
NumericVector autocart(NumericVector response, DataFrame data, NumericMatrix locations, double alpha);
RcppExport SEXP _autocart_autocart(SEXP responseSEXP, SEXP dataSEXP, SEXP locationsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type response(responseSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type locations(locationsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(autocart(response, data, locations, alpha));
    return rcpp_result_gen;
END_RCPP
}
// testSpatialMethods
NumericVector testSpatialMethods(NumericVector response, NumericMatrix locations);
RcppExport SEXP _autocart_testSpatialMethods(SEXP responseSEXP, SEXP locationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type response(responseSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type locations(locationsSEXP);
    rcpp_result_gen = Rcpp::wrap(testSpatialMethods(response, locations));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_autocart_autocart", (DL_FUNC) &_autocart_autocart, 4},
    {"_autocart_testSpatialMethods", (DL_FUNC) &_autocart_testSpatialMethods, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_autocart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
